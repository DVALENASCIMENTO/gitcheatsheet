const sections = [
    {
      number: 1,
      emoji: "‚öôÔ∏è",
      title: "Configura√ß√£o Inicial",
      color: "yellow",
      commands: [
        { cmd: "git config --global user.name \"Seu Nome\"", desc: "Define o nome de usu√°rio global do Git." },
        { cmd: "git config --global user.email \"seu@email.com\"", desc: "Define o email de usu√°rio global do Git." },
        { cmd: "git config --global core.editor \"code --wait\"", desc: "Define o editor de texto padr√£o (por exemplo, Visual Studio Code)." },
        { cmd: "git config --global color.ui auto", desc: "Habilita a coloriza√ß√£o autom√°tica da sa√≠da de comandos do Git." },
        { cmd: "git config --list", desc: "Exibe todas as configura√ß√µes globais do Git atualmente definidas." }
      ]
    },
    {
      number: 2,
      emoji: "üìÅ",
      title: "Criar Reposit√≥rio",
      color: "violet",
      commands: [
        { cmd: "git init", desc: "Inicializa um novo reposit√≥rio Git na pasta atual." },
        { cmd: "git clone <url_do_repositorio>", desc: "Clona um reposit√≥rio remoto existente para o computador local." }
      ]
    },
    {
      number: 3,
      emoji: "üìä",
      title: "Status e Informa√ß√µes",
      color: "blue",
      commands: [
        { cmd: "git status", desc: "Mostra o estado atual do reposit√≥rio (modifica√ß√µes, arquivos n√£o rastreados etc.)." },
        { cmd: "git log", desc: "Exibe o hist√≥rico de commits (todos os commits, com detalhes)." },
        { cmd: "git log --oneline", desc: "Exibe o hist√≥rico de commits de forma compacta (uma linha por commit)." },
        { cmd: "git log --graph --all", desc: "Exibe o hist√≥rico de commits de todas as branches de forma gr√°fica." },
        { cmd: "git show <commit>", desc: "Mostra detalhes das mudan√ßas em um commit espec√≠fico." },
        { cmd: "git diff", desc: "Mostra as diferen√ßas entre o diret√≥rio de trabalho e o √≠ndice (staged)." },
        { cmd: "git diff --staged", desc: "Mostra as diferen√ßas entre o √≠ndice (staged) e o √∫ltimo commit." }
      ]
    },
    {
      number: 4,
      emoji: "‚ûï",
      title: "Adicionar e Commitar Arquivos",
      color: "red",
      commands: [
        { cmd: "git add <arquivo>", desc: "Adiciona um arquivo espec√≠fico ao √≠ndice para o pr√≥ximo commit." },
        { cmd: "git add .", desc: "Adiciona todas as mudan√ßas atuais ao √≠ndice para o pr√≥ximo commit." },
        { cmd: "git commit -m \"mensagem\"", desc: "Cria um commit com a mensagem informada (apenas arquivos no √≠ndice)." },
        { cmd: "git commit -am \"mensagem\"", desc: "Adiciona todos os arquivos modificados (j√° rastreados) e cria um commit em uma etapa." }
      ]
    },
    {
      number: 5,
      emoji: "üåø",
      title: "Trabalhando com Branches",
      color: "orange",
      commands: [
        { cmd: "git branch", desc: "Lista todas as branches locais no reposit√≥rio." },
        { cmd: "git branch <nome-branch>", desc: "Cria uma nova branch com o nome especificado." },
        { cmd: "git checkout <nome-branch>", desc: "Muda para a branch especificada." },
        { cmd: "git switch <nome-branch>", desc: "Muda para a branch especificada (comando alternativo mais recente)." },
        { cmd: "git checkout -b <nova-branch>", desc: "Cria e j√° muda para uma nova branch nomeada." },
        { cmd: "git switch -c <nova-branch>", desc: "Cria e j√° muda para uma nova branch (alternativa de 'checkout -b')." },
        { cmd: "git branch -d <nome-branch>", desc: "Deleta a branch local especificada (deve estar mesclada)." }
      ]
    },
    {
      number: 6,
      emoji: "üîÄ",
      title: "Merge e Rebase",
      color: "pink",
      commands: [
        { cmd: "git merge <nome-branch>", desc: "Realiza um merge da branch especificada na branch atual." },
        { cmd: "git rebase <nome-branch>", desc: "Rebaseia a branch atual em cima da branch especificada." },
        { cmd: "git rebase -i HEAD~3", desc: "Inicia um rebase interativo nos √∫ltimos 3 commits (para squash/reordenar etc.)." },
        { cmd: "git rebase --abort", desc: "Aborta um rebase em andamento, restaurando o estado anterior." }
      ]
    },
    {
      number: 7,
      emoji: "üîÑ",
      title: "Atualizando o Reposit√≥rio",
      color: "teal",
      commands: [
        { cmd: "git pull", desc: "Faz fetch e merge das mudan√ßas do reposit√≥rio remoto na branch atual." },
        { cmd: "git fetch", desc: "Busca as atualiza√ß√µes do reposit√≥rio remoto, mas n√£o faz merge autom√°tico." },
        { cmd: "git merge origin/main", desc: "Faz merge da branch 'main' do remoto 'origin' na branch atual." },
        { cmd: "git pull origin main", desc: "Puxa (fetch + merge) a branch 'main' do remoto 'origin'." },
        { cmd: "git fetch --all", desc: "Busca atualiza√ß√µes de todos os reposit√≥rios remotos configurados." }
      ]
    },
    {
      number: 8,
      emoji: "‚òÅÔ∏è",
      title: "Trabalhando com Remotos",
      color: "cyan",
      commands: [
        { cmd: "git remote -v", desc: "Lista os reposit√≥rios remotos configurados (nome e URL)." },
        { cmd: "git remote add origin <url>", desc: "Adiciona o reposit√≥rio remoto com o nome 'origin' e a URL informada." },
        { cmd: "git push -u origin main", desc: "Envia a branch 'main' para o remoto 'origin' e define o upstream." },
        { cmd: "git push origin <nome-branch>", desc: "Envia a branch especificada para o remoto 'origin'." },
        { cmd: "git pull origin main", desc: "Puxa as mudan√ßas da branch 'main' do remoto 'origin'." },
        { cmd: "git remote remove origin", desc: "Remove o reposit√≥rio remoto 'origin'." }
      ]
    },
    {
      number: 9,
      emoji: "üóÑÔ∏è",
      title: "Stash",
      color: "purple",
      commands: [
        { cmd: "git stash", desc: "Guarda temporariamente as altera√ß√µes n√£o commitadas no stash." },
        { cmd: "git stash save \"mensagem\"", desc: "Guarda as altera√ß√µes no stash com uma mensagem opcional." },
        { cmd: "git stash list", desc: "Lista os itens salvos no stash." },
        { cmd: "git stash apply", desc: "Aplica as altera√ß√µes do √∫ltimo stash na branch atual." },
        { cmd: "git stash pop", desc: "Aplica e remove o √∫ltimo stash da pilha." },
        { cmd: "git stash drop", desc: "Remove o √∫ltimo stash da pilha." },
        { cmd: "git stash clear", desc: "Limpa todos os itens salvos no stash." }
      ]
    },
    {
      number: 10,
      emoji: "üè∑Ô∏è",
      title: "Tags",
      color: "green",
      commands: [
        { cmd: "git tag", desc: "Lista todas as tags existentes localmente." },
        { cmd: "git tag -a v1.0 -m \"mensagem\"", desc: "Cria uma tag anotada 'v1.0' com a mensagem especificada." },
        { cmd: "git tag -d v1.0", desc: "Deleta a tag especificada localmente." },
        { cmd: "git push --tags", desc: "Envia todas as tags locais para o reposit√≥rio remoto." }
      ]
    },
    {
      number: 11,
      emoji: "üì¶",
      title: "Subm√≥dulos",
      color: "gray",
      commands: [
        { cmd: "git submodule add <url> <caminho>", desc: "Adiciona um reposit√≥rio como subm√≥dulo no caminho especificado." },
        { cmd: "git submodule init", desc: "Inicializa os arquivos de subm√≥dulos registrados em .gitmodules." },
        { cmd: "git submodule update", desc: "Clona ou atualiza os arquivos dos subm√≥dulos para as vers√µes definidas." },
        { cmd: "git submodule update --remote", desc: "Atualiza todos os subm√≥dulos para o commit mais recente no reposit√≥rio remoto." }
      ]
    },
    {
      number: 12,
      emoji: "‚Ü©Ô∏è",
      title: "Desfazendo Altera√ß√µes",
      color: "brown",
      commands: [
        { cmd: "git checkout -- <arquivo>", desc: "Descarta altera√ß√µes locais em um arquivo (traz do √∫ltimo commit)." },
        { cmd: "git restore <arquivo>", desc: "Restaura o arquivo a partir do √∫ltimo commit (novo comando Git)." },
        { cmd: "git reset", desc: "Remove todas as mudan√ßas do √≠ndice (staged) sem alterar os arquivos." },
        { cmd: "git reset --soft HEAD~1", desc: "Move o HEAD para o commit anterior, mantendo mudan√ßas no √≠ndice." },
        { cmd: "git reset --hard HEAD~1", desc: "Volta ao commit anterior descartando todas as mudan√ßas locais." },
        { cmd: "git revert <commit>", desc: "Cria um novo commit que desfaz as mudan√ßas do commit especificado." }
      ]
    },
    {
      number: 13,
      emoji: "üö´",
      title: "Ignorar Arquivos",
      color: "amber",
      commands: [
        { cmd: "git clean -n", desc: "Mostra quais arquivos n√£o rastreados seriam removidos sem de fato remov√™-los." },
        { cmd: "git clean -f", desc: "Remove todos os arquivos n√£o rastreados do diret√≥rio de trabalho." },
        { cmd: "git rm --cached <arquivo>", desc: "Remove o arquivo do √≠ndice (mant√©m-no no diret√≥rio, √∫til para .gitignore)." }
      ]
    },
    {
      number: 14,
      emoji: "‚ö†Ô∏è",
      title: "Resolvendo Conflitos",
      color: "orange",
      commands: [
        { cmd: "git status", desc: "Mostra arquivos com conflitos ap√≥s um merge ou rebase." },
        { cmd: "git merge --abort", desc: "Cancela o merge em andamento e volta ao estado anterior." },
        { cmd: "git rebase --abort", desc: "Cancela o rebase em andamento e restaura o estado anterior." },
        { cmd: "git add <arquivo>", desc: "Marca o arquivo como resolvido ap√≥s editar conflitos." },
        { cmd: "git commit -m \"Resolvendo conflitos\"", desc: "Finaliza o merge criando o commit de resolu√ß√£o de conflitos." }
      ]
    }
  ];
  
  // Gera as se√ß√µes e bot√µes no HTML
  document.addEventListener('DOMContentLoaded', function() {
    const container = document.getElementById('cheat-sheet');
  
    sections.forEach((sec, secIndex) => {
      const secEl = document.createElement('section');
      secEl.classList.add(sec.color);
  
      const header = document.createElement('h2');
      header.className = 'section-header';
      header.innerText = `${sec.number}. ${sec.emoji} ${sec.title}`;
      secEl.appendChild(header);
  
      const cmdContainer = document.createElement('div');
      cmdContainer.className = 'commands';
  
      sec.commands.forEach((cmdObj, cmdIndex) => {
        const btn = document.createElement('button');
        btn.className = 'cmd-button';
        btn.innerText = cmdObj.cmd;
        btn.setAttribute('data-sec', secIndex);
        btn.setAttribute('data-cmd', cmdIndex);
        btn.setAttribute('aria-label', cmdObj.cmd + ' ‚Äî ' + cmdObj.desc);
        cmdContainer.appendChild(btn);
      });
  
      secEl.appendChild(cmdContainer);
      container.appendChild(secEl);
    });
  
    // L√≥gica do modal/pop-up
    const modal = document.getElementById('modal');
    const modalTitle = document.getElementById('modal-title');
    const modalText = document.getElementById('modal-text');
    const closeBtn = document.querySelector('.close');
  
    // Abre o modal ao clicar num comando
    container.addEventListener('click', function(e) {
      if (e.target.classList.contains('cmd-button')) {
        const secIndex = e.target.getAttribute('data-sec');
        const cmdIndex = e.target.getAttribute('data-cmd');
        const cmdObj = sections[secIndex].commands[cmdIndex];
        modalTitle.innerText = cmdObj.cmd;
        modalText.innerText = cmdObj.desc;
        modal.style.display = 'flex';
      }
    });
  
    // Fecha o modal ao clicar no "X" ou fora do conte√∫do
    closeBtn.addEventListener('click', () => {
      modal.style.display = 'none';
    });
    window.addEventListener('click', function(e) {
      if (e.target === modal) {
        modal.style.display = 'none';
      }
    });
    // Fecha o modal com ESC
    window.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        modal.style.display = 'none';
      }
    });
  });
  
  // Mostrar o bot√£o quando rolar
  window.onscroll = function () {
    const btn = document.getElementById("backToTopBtn");
    if (document.body.scrollTop > 200 || document.documentElement.scrollTop > 200) {
      btn.style.display = "block";
    } else {
      btn.style.display = "none";
    }
  };
  
  // Voltar ao topo quando clicar
  document.getElementById("backToTopBtn").addEventListener("click", function () {
    window.scrollTo({ top: 0, behavior: "smooth" });
  });
  
  document.getElementById('btnTop').addEventListener('click', function () {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  });
  