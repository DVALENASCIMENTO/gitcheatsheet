const sections = [
    {
  "number": 1,
  "emoji": "‚öôÔ∏è",
  "title": "Configura√ß√£o Inicial",
  "color": "yellow",
  "commands": [
    {
      "cmd": "git config --global user.name \"Seu Nome\"",
      "desc": "Este comando define o nome do usu√°rio que ser√° associado aos commits feitos globalmente no Git. Isso significa que todos os reposit√≥rios no seu sistema usar√£o este nome, a menos que uma configura√ß√£o local o substitua."
    },
    {
      "cmd": "git config --global user.email \"seu@email.com\"",
      "desc": "Este comando define o e-mail que ser√° vinculado aos seus commits Git globalmente. √â importante usar o mesmo e-mail da sua conta no GitHub (ou outro servi√ßo Git), para que os commits fiquem associados corretamente ao seu perfil."
    },
    {
      "cmd": "git config --global core.editor \"code --wait\"",
      "desc": "Este comando define o editor de texto padr√£o que o Git usar√° ao precisar de entrada do usu√°rio (como mensagens de commit). O par√¢metro `--wait` faz o Git aguardar at√© que o editor seja fechado. Aqui est√° sendo usado o Visual Studio Code como exemplo."
    },
    {
      "cmd": "git config --global color.ui auto",
      "desc": "Ativa a exibi√ß√£o de cores nos comandos do Git (como `git status` ou `git diff`), o que facilita a leitura e compreens√£o das sa√≠das. O modo `auto` faz o Git decidir automaticamente quando usar cores, dependendo do ambiente."
    },
    {
      "cmd": "git config --list",
      "desc": "Exibe todas as configura√ß√µes atualmente definidas no Git (globais, locais e de sistema). √ötil para verificar se as configura√ß√µes, como nome de usu√°rio e e-mail, foram aplicadas corretamente."
    }
  ]
},
    {
  "number": 2,
  "emoji": "üìÅ",
  "title": "Criar Reposit√≥rio",
  "color": "violet",
  "commands": [
    {
      "cmd": "git init",
      "desc": "Cria um novo reposit√≥rio Git vazio na pasta atual. Isso gera um diret√≥rio oculto chamado `.git`, onde o Git armazenar√° todo o hist√≥rico de vers√µes e metadados. Use este comando quando quiser come√ßar a versionar um projeto que ainda n√£o est√° sob controle de vers√£o."
    },
    {
      "cmd": "git clone <url_do_repositorio>",
      "desc": "Copia todo o conte√∫do e hist√≥rico de um reposit√≥rio remoto (por exemplo, no GitHub) para sua m√°quina local. Substitua `<url_do_repositorio>` pela URL HTTPS ou SSH do reposit√≥rio. Esse comando tamb√©m configura automaticamente o reposit√≥rio remoto como 'origin'."
    }
  ]
},
    {
  "number": 3,
  "emoji": "üìä",
  "title": "Status e Informa√ß√µes",
  "color": "blue",
  "commands": [
    {
      "cmd": "git status",
      "desc": "Exibe o estado atual do reposit√≥rio, incluindo arquivos modificados, adicionados, deletados, n√£o rastreados (untracked) e aqueles prontos para o commit (staged). √â um comando essencial para acompanhar o que est√° acontecendo no seu reposit√≥rio."
    },
    {
      "cmd": "git log",
      "desc": "Mostra o hist√≥rico completo de commits no reposit√≥rio, incluindo autor, data, hash do commit e a mensagem associada. Permite acompanhar toda a evolu√ß√£o do projeto."
    },
    {
      "cmd": "git log --oneline",
      "desc": "Exibe o hist√≥rico de commits de maneira compacta, mostrando apenas o hash abreviado e a mensagem do commit em uma √∫nica linha. √ötil para uma vis√£o r√°pida e resumida."
    },
    {
      "cmd": "git log --graph --all",
      "desc": "Mostra um gr√°fico em √°rvore de todos os commits em todas as branches. Ajuda a visualizar como os ramos se conectam, especialmente em projetos com muitos merges e ramifica√ß√µes."
    },
    {
      "cmd": "git show <commit>",
      "desc": "Exibe os detalhes de um commit espec√≠fico, incluindo as mudan√ßas realizadas, o autor, a data e a mensagem. Substitua `<commit>` pelo hash do commit que voc√™ deseja inspecionar."
    },
    {
      "cmd": "git diff",
      "desc": "Compara as altera√ß√µes entre o diret√≥rio de trabalho atual e a √°rea de stage (√≠ndice). Mostra as modifica√ß√µes feitas nos arquivos antes de serem preparados para commit."
    },
    {
      "cmd": "git diff --staged",
      "desc": "Mostra as diferen√ßas entre os arquivos que j√° foram adicionados √† √°rea de stage (staged) e o √∫ltimo commit. √ötil para revisar o que exatamente ser√° enviado no pr√≥ximo commit."
    }
  ]
},
    {
  "number": 4,
  "emoji": "‚ûï",
  "title": "Adicionar e Commitar Arquivos",
  "color": "red",
  "commands": [
    {
      "cmd": "git add <arquivo>",
      "desc": "Adiciona um arquivo espec√≠fico ao √≠ndice (staging area), preparando-o para o pr√≥ximo commit. Substitua `<arquivo>` pelo nome do arquivo desejado. O Git passar√° a acompanhar esse arquivo no pr√≥ximo commit."
    },
    {
      "cmd": "git add .",
      "desc": "Adiciona todas as altera√ß√µes de arquivos no diret√≥rio atual e subdiret√≥rios (exceto os ignorados) ao √≠ndice. √â um atalho para preparar m√∫ltiplas mudan√ßas para o commit de uma vez."
    },
    {
      "cmd": "git commit -m \"mensagem\"",
      "desc": "Cria um novo commit com a mensagem informada, incluindo apenas os arquivos que foram adicionados ao √≠ndice com `git add`. Use mensagens claras e descritivas para facilitar o hist√≥rico do projeto."
    },
    {
      "cmd": "git commit -am \"mensagem\"",
      "desc": "Adiciona automaticamente todas as altera√ß√µes em arquivos j√° rastreados e cria um commit em uma √∫nica etapa. **N√£o adiciona novos arquivos** ‚Äî apenas os que j√° est√£o sendo monitorados pelo Git."
    }
  ]
},
    {
  "number": 5,
  "emoji": "üåø",
  "title": "Trabalhando com Branches",
  "color": "orange",
  "commands": [
    {
      "cmd": "git branch",
      "desc": "Lista todas as branches locais existentes no reposit√≥rio. A branch atual √© marcada com um asterisco (*)."
    },
    {
      "cmd": "git branch <nome-branch>",
      "desc": "Cria uma nova branch com o nome especificado. Essa branch ainda n√£o √© ativada automaticamente ‚Äî voc√™ precisar√° mudar para ela usando `git checkout` ou `git switch`."
    },
    {
      "cmd": "git checkout <nome-branch>",
      "desc": "Muda para a branch indicada. Esse comando tamb√©m atualiza os arquivos do diret√≥rio de trabalho conforme o conte√∫do da branch escolhida. Requer Git anterior √† vers√£o 2.23 ou por compatibilidade."
    },
    {
      "cmd": "git switch <nome-branch>",
      "desc": "Alternativa moderna ao `git checkout`, usada exclusivamente para mudar de branch. Introduzida no Git 2.23 para tornar os comandos mais intuitivos."
    },
    {
      "cmd": "git checkout -b <nova-branch>",
      "desc": "Cria uma nova branch e j√° muda para ela em um √∫nico comando. Muito √∫til para come√ßar rapidamente uma nova linha de desenvolvimento."
    },
    {
      "cmd": "git switch -c <nova-branch>",
      "desc": "Equivalente ao `git checkout -b`, mas com a sintaxe moderna. Cria e alterna para a nova branch de forma direta e clara."
    },
    {
      "cmd": "git branch -d <nome-branch>",
      "desc": "Deleta a branch local especificada. S√≥ funciona se a branch j√° tiver sido mesclada (merged) com outra, evitando perda de trabalho. Para for√ßar a exclus√£o, use `-D` (com D mai√∫sculo)."
    }
  ]
},
    {
  "number": 6,
  "emoji": "üîÄ",
  "title": "Merge e Rebase",
  "color": "pink",
  "commands": [
    {
      "cmd": "git merge <nome-branch>",
      "desc": "Integra as altera√ß√µes da branch especificada √† branch atual. O Git criar√° um novo commit de merge se houver diverg√™ncias. Ideal para preservar o hist√≥rico de desenvolvimento paralelo."
    },
    {
      "cmd": "git rebase <nome-branch>",
      "desc": "Reescreve o hist√≥rico da branch atual colocando seus commits 'por cima' da branch especificada, como se tivessem sido feitos ap√≥s ela. Produz um hist√≥rico mais linear e limpo."
    },
    {
      "cmd": "git rebase -i HEAD~3",
      "desc": "Inicia um rebase interativo nos √∫ltimos 3 commits. Permite combinar (squash), reordenar ou editar mensagens de commits para melhorar a clareza e organiza√ß√£o do hist√≥rico antes de envi√°-lo para um reposit√≥rio remoto."
    },
    {
      "cmd": "git rebase --abort",
      "desc": "Cancela um rebase em andamento, restaurando o reposit√≥rio ao estado anterior ao in√≠cio do rebase. √ötil em caso de conflitos ou se voc√™ mudar de ideia durante o processo."
    }
  ]
},
    {
  "number": 7,
  "emoji": "üîÑ",
  "title": "Atualizando o Reposit√≥rio",
  "color": "teal",
  "commands": [
    {
      "cmd": "git pull",
      "desc": "Combina dois comandos: `git fetch` e `git merge`. Busca atualiza√ß√µes do reposit√≥rio remoto e aplica automaticamente na branch atual. √ötil para manter o reposit√≥rio local sincronizado."
    },
    {
      "cmd": "git fetch",
      "desc": "Busca atualiza√ß√µes (commits, branches, tags) do reposit√≥rio remoto, mas **n√£o** altera a branch atual. Permite inspecionar ou integrar as mudan√ßas manualmente depois."
    },
    {
      "cmd": "git merge origin/main",
      "desc": "Faz merge manual da branch `main` do reposit√≥rio remoto (`origin`) na branch local atual. √ötil ap√≥s `git fetch` para integrar as mudan√ßas."
    },
    {
      "cmd": "git pull origin main",
      "desc": "Busca (`fetch`) e mescla (`merge`) diretamente a branch `main` do remoto `origin` na branch atual. Espec√≠fico quando voc√™ quer controlar de onde vem a atualiza√ß√£o."
    },
    {
      "cmd": "git fetch --all",
      "desc": "Busca atualiza√ß√µes de **todos os reposit√≥rios remotos** configurados no seu projeto. N√£o altera nenhuma branch local, apenas atualiza os dados de rastreamento remoto."
    }
  ]
},
    {
  "number": 8,
  "emoji": "‚òÅÔ∏è",
  "title": "Trabalhando com Remotos",
  "color": "cyan",
  "commands": [
    {
      "cmd": "git remote -v",
      "desc": "Exibe a lista de reposit√≥rios remotos configurados no projeto, mostrando seus nomes (ex: origin) e as URLs correspondentes. O `-v` mostra os detalhes de fetch e push."
    },
    {
      "cmd": "git remote add origin <url>",
      "desc": "Adiciona um reposit√≥rio remoto com o nome `origin` e a URL especificada. Esse nome ser√° usado para facilitar o push/pull do reposit√≥rio remoto."
    },
    {
      "cmd": "git push -u origin main",
      "desc": "Envia a branch `main` para o reposit√≥rio remoto `origin` e define um 'upstream'. Isso permite usar `git push` ou `git pull` diretamente nas pr√≥ximas vezes sem especificar o nome da branch/remoto."
    },
    {
      "cmd": "git push origin <nome-branch>",
      "desc": "Envia a branch local especificada para o reposit√≥rio remoto `origin`. √ötil ao trabalhar com m√∫ltiplas branches."
    },
    {
      "cmd": "git pull origin main",
      "desc": "Busca e mescla as mudan√ßas da branch `main` do remoto `origin` na branch atual local. Ideal para manter seu reposit√≥rio atualizado com a vers√£o remota."
    },
    {
      "cmd": "git remote remove origin",
      "desc": "Remove a refer√™ncia ao reposit√≥rio remoto chamado `origin`. Use com cuidado, pois isso desvincula seu reposit√≥rio local do remoto correspondente."
    }
  ]
},
    {
  "number": 9,
  "emoji": "üóÑÔ∏è",
  "title": "Stash",
  "color": "purple",
  "commands": [
    {
      "cmd": "git stash",
      "desc": "Guarda temporariamente todas as altera√ß√µes n√£o commitadas (modifica√ß√µes e arquivos novos) em uma √°rea de armazenamento chamada 'stash', limpando sua √°rea de trabalho para que possa mudar de branch ou trabalhar em outra coisa."
    },
    {
      "cmd": "git stash save \"mensagem\"",
      "desc": "Salva as altera√ß√µes no stash com uma mensagem descritiva, facilitando a identifica√ß√£o posteriormente. Essa forma √© √∫til para organizar v√°rios stashes."
    },
    {
      "cmd": "git stash list",
      "desc": "Exibe a lista de todos os stashes armazenados, mostrando suas mensagens e identificadores para que voc√™ possa escolher qual aplicar ou remover."
    },
    {
      "cmd": "git stash apply",
      "desc": "Aplica as altera√ß√µes do stash mais recente na sua branch atual, mas mant√©m o stash salvo para reutiliza√ß√£o futura, caso necess√°rio."
    },
    {
      "cmd": "git stash pop",
      "desc": "Aplica as altera√ß√µes do stash mais recente na sua branch atual e, ao mesmo tempo, remove esse stash da lista de armazenamento, liberando espa√ßo."
    },
    {
      "cmd": "git stash drop",
      "desc": "Remove um stash espec√≠fico da lista (por padr√£o o mais recente), liberando espa√ßo e evitando confus√£o com stashes antigos."
    },
    {
      "cmd": "git stash clear",
      "desc": "Remove todos os stashes salvos, limpando completamente essa √°rea de armazenamento tempor√°rio."
    }
  ]
},
    {
  "number": 10,
  "emoji": "üè∑Ô∏è",
  "title": "Tags",
  "color": "green",
  "commands": [
    {
      "cmd": "git tag",
      "desc": "Mostra uma lista de todas as tags que voc√™ criou localmente no reposit√≥rio. Tags s√£o marcadores que indicam vers√µes espec√≠ficas do projeto."
    },
    {
      "cmd": "git tag -a v1.0 -m \"mensagem\"",
      "desc": "Cria uma tag anotada chamada 'v1.0' com uma mensagem explicativa. Tags anotadas armazenam informa√ß√µes extras, como autor, data e descri√ß√£o."
    },
    {
      "cmd": "git tag -d v1.0",
      "desc": "Remove localmente a tag chamada 'v1.0'. Isso n√£o afeta tags j√° enviadas para reposit√≥rios remotos."
    },
    {
      "cmd": "git push --tags",
      "desc": "Envia todas as tags que existem localmente para o reposit√≥rio remoto, tornando-as vis√≠veis para todos os colaboradores."
    }
  ]
},
    {
  "number": 11,
  "emoji": "üì¶",
  "title": "Subm√≥dulos",
  "color": "gray",
  "commands": [
    {
      "cmd": "git submodule add <url> <caminho>",
      "desc": "Adiciona um reposit√≥rio Git externo como um subm√≥dulo dentro do seu projeto, colocando-o no caminho especificado. √ötil para incluir bibliotecas ou depend√™ncias versionadas separadamente."
    },
    {
      "cmd": "git submodule init",
      "desc": "Inicializa os arquivos de configura√ß√£o dos subm√≥dulos presentes no arquivo .gitmodules, preparando o projeto para usar os subm√≥dulos."
    },
    {
      "cmd": "git submodule update",
      "desc": "Clona ou atualiza os subm√≥dulos para os commits espec√≠ficos registrados no reposit√≥rio principal, garantindo que cada subm√≥dulo esteja na vers√£o correta."
    },
    {
      "cmd": "git submodule update --remote",
      "desc": "Atualiza todos os subm√≥dulos para os commits mais recentes do reposit√≥rio remoto, ao inv√©s de usar os commits fixados no projeto principal."
    }
  ]
},
    {
  "number": 12,
  "emoji": "‚Ü©Ô∏è",
  "title": "Desfazendo Altera√ß√µes",
  "color": "brown",
  "commands": [
    {
      "cmd": "git checkout -- <arquivo>",
      "desc": "Descarta todas as modifica√ß√µes locais feitas no arquivo especificado, restaurando-o para a vers√£o do √∫ltimo commit. Use com cuidado, pois as mudan√ßas locais ser√£o perdidas."
    },
    {
      "cmd": "git restore <arquivo>",
      "desc": "Comando mais recente que substitui 'git checkout' para restaurar um arquivo ao estado do √∫ltimo commit, descartando altera√ß√µes locais n√£o commitadas."
    },
    {
      "cmd": "git reset",
      "desc": "Remove os arquivos do √≠ndice (√°rea staged), ou seja, desfaz o 'git add', mas mant√©m as mudan√ßas nos arquivos locais para serem editadas."
    },
    {
      "cmd": "git reset --soft HEAD~1",
      "desc": "Desfaz o √∫ltimo commit, movendo o ponteiro HEAD para o commit anterior, mas mant√©m as mudan√ßas feitas no √≠ndice (prontas para novo commit)."
    },
    {
      "cmd": "git reset --hard HEAD~1",
      "desc": "Desfaz o √∫ltimo commit e descarta todas as altera√ß√µes locais, tanto no √≠ndice quanto no diret√≥rio de trabalho. Aten√ß√£o: essa a√ß√£o √© irrevers√≠vel."
    },
    {
      "cmd": "git revert <commit>",
      "desc": "Cria um novo commit que desfaz as mudan√ßas realizadas por um commit anterior espec√≠fico, preservando o hist√≥rico e evitando problemas em reposit√≥rios compartilhados."
    }
  ]
},
    {
  "number": 13,
  "emoji": "üö´",
  "title": "Ignorar Arquivos",
  "color": "amber",
  "commands": [
    {
      "cmd": "git clean -n",
      "desc": "Simula a remo√ß√£o de arquivos n√£o rastreados, mostrando quais arquivos seriam deletados sem realmente apag√°-los. √ötil para ver o que ser√° removido antes de executar o comando."
    },
    {
      "cmd": "git clean -f",
      "desc": "Remove todos os arquivos n√£o rastreados do diret√≥rio de trabalho. Use com cuidado, pois arquivos deletados n√£o podem ser recuperados pelo Git."
    },
    {
      "cmd": "git rm --cached <arquivo>",
      "desc": "Remove o arquivo do √≠ndice (staging area) sem delet√°-lo do diret√≥rio local. Ideal para parar de rastrear arquivos que devem ser ignorados, como listados no .gitignore."
    }
  ]
},
    {
  "number": 14,
  "emoji": "‚ö†Ô∏è",
  "title": "Resolvendo Conflitos",
  "color": "orange",
  "commands": [
    {
      "cmd": "git status",
      "desc": "Exibe o estado atual do reposit√≥rio, destacando arquivos que est√£o em conflito ap√≥s um merge ou rebase. Indica quais arquivos precisam ser corrigidos."
    },
    {
      "cmd": "git merge --abort",
      "desc": "Cancela o merge em andamento, desfazendo todas as altera√ß√µes feitas durante o processo e retornando ao estado antes do merge. √ötil para abandonar um merge com conflitos dif√≠ceis."
    },
    {
      "cmd": "git rebase --abort",
      "desc": "Cancela o rebase em andamento, restaurando o reposit√≥rio ao estado antes do in√≠cio do rebase. Use quando encontrar conflitos dif√≠ceis durante o rebase."
    },
    {
      "cmd": "git add <arquivo>",
      "desc": "Depois de resolver manualmente os conflitos em um arquivo, este comando marca o arquivo como resolvido e o adiciona ao √≠ndice para o pr√≥ximo commit."
    },
    {
      "cmd": "git commit -m \"Resolvendo conflitos\"",
      "desc": "Finaliza o processo de merge criando um commit que registra a resolu√ß√£o dos conflitos. Essa mensagem pode ser personalizada."
    }
  ]
}
  ];
  
  // Gera as se√ß√µes e bot√µes no HTML
  document.addEventListener('DOMContentLoaded', function() {
    const container = document.getElementById('cheat-sheet');
  
    sections.forEach((sec, secIndex) => {
      const secEl = document.createElement('section');
      secEl.classList.add(sec.color);
  
      const header = document.createElement('h2');
      header.className = 'section-header';
      header.innerText = `${sec.number}. ${sec.emoji} ${sec.title}`;
      secEl.appendChild(header);
  
      const cmdContainer = document.createElement('div');
      cmdContainer.className = 'commands';
  
      sec.commands.forEach((cmdObj, cmdIndex) => {
        const btn = document.createElement('button');
        btn.className = 'cmd-button';
        btn.innerText = cmdObj.cmd;
        btn.setAttribute('data-sec', secIndex);
        btn.setAttribute('data-cmd', cmdIndex);
        btn.setAttribute('aria-label', cmdObj.cmd + ' ‚Äî ' + cmdObj.desc);
        cmdContainer.appendChild(btn);
      });
  
      secEl.appendChild(cmdContainer);
      container.appendChild(secEl);
    });
  
    // L√≥gica do modal/pop-up
    const modal = document.getElementById('modal');
    const modalTitle = document.getElementById('modal-title');
    const modalText = document.getElementById('modal-text');
    const closeBtn = document.querySelector('.close');
  
    // Abre o modal ao clicar num comando
    container.addEventListener('click', function(e) {
      if (e.target.classList.contains('cmd-button')) {
        const secIndex = e.target.getAttribute('data-sec');
        const cmdIndex = e.target.getAttribute('data-cmd');
        const cmdObj = sections[secIndex].commands[cmdIndex];
        modalTitle.innerText = cmdObj.cmd;
        modalText.innerText = cmdObj.desc;
        modal.style.display = 'flex';
      }
    });
  
    // Fecha o modal ao clicar no "X" ou fora do conte√∫do
    closeBtn.addEventListener('click', () => {
      modal.style.display = 'none';
    });
    window.addEventListener('click', function(e) {
      if (e.target === modal) {
        modal.style.display = 'none';
      }
    });
    // Fecha o modal com ESC
    window.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        modal.style.display = 'none';
      }
    });
  });
  
  // Mostrar o bot√£o quando rolar
  window.onscroll = function () {
    const btn = document.getElementById("backToTopBtn");
    if (document.body.scrollTop > 200 || document.documentElement.scrollTop > 200) {
      btn.style.display = "block";
    } else {
      btn.style.display = "none";
    }
  };
  
  // Voltar ao topo quando clicar
  document.getElementById("backToTopBtn").addEventListener("click", function () {
    window.scrollTo({ top: 0, behavior: "smooth" });
  });
  
  document.getElementById('btnTop').addEventListener('click', function () {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  });
  